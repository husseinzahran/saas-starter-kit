generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                     String       @id @default(uuid())
  name                   String
  email                  String       @unique
  emailVerified          DateTime?
  password               String?
  image                  String?
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @default(now())
  invalid_login_attempts Int          @default(0)
  lockedAt               DateTime?
  accounts               Account[]
  invitations            Invitation[]
  sessions               Session[]
  teamMembers            TeamMember[]
}

model Team {
  id          String       @id @default(uuid())
  name        String
  slug        String       @unique
  domain      String?      @unique
  defaultRole Role         @default(MEMBER)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  apiKeys     ApiKey[]
  invitations Invitation[]
  members     TeamMember[]
}

model TeamMember {
  id        String   @id @default(uuid())
  teamId    String
  userId    String
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([userId])
}

model Invitation {
  id        String   @id @default(uuid())
  teamId    String
  email     String
  role      Role     @default(MEMBER)
  token     String   @unique
  expires   DateTime
  invitedBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [invitedBy], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, email])
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
}

model ApiKey {
  id         String    @id @default(uuid())
  name       String
  teamId     String
  hashedKey  String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  expiresAt  DateTime?
  lastUsedAt DateTime?
  team       Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model orders {
  id                          BigInt    @id
  data                        Json
  created_at                  DateTime? @default(dbgenerated("jsonb_to_timestamp((data -> 'created_at'::text))")) @db.Timestamp(6)
  total_unit_cost_amount      Decimal?  @default(dbgenerated("sum_unit_costs_prod(data)")) @db.Decimal
  commission                  Decimal?  @db.Decimal
  total_discounts             Decimal?  @default(dbgenerated("((data ->> 'total_discounts'::text))::numeric")) @db.Decimal
  shop_money_amount           Decimal?  @default(dbgenerated("((((data -> 'total_line_items_price_set'::text) -> 'shop_money'::text) ->> 'amount'::text))::numeric")) @db.Decimal
  total_amount_for_hushy_wear Decimal?  @db.Decimal
  order_name                  String?   @default(dbgenerated("(data ->> 'name'::text)"))
  customer_phone              String?   @default(dbgenerated("clean_and_extract_phone(data)"))
  order_status                String?   @db.VarChar(255)
  isexchange                  Boolean?  @default(false)
  total_price                 Decimal?  @default(dbgenerated("((data ->> 'total_price'::text))::numeric")) @db.Decimal(10, 2)
}

model qp_orders_full {
  id                Int       @id(map: "qp_orders_pkey_f") @default(autoincrement())
  phone             String?   @db.VarChar(100)
  address           String?
  notes             String?
  weight            Decimal?  @db.Decimal(10, 2)
  city              String?   @db.VarChar(100)
  status            String?
  full_name         String?   @map("full name") @db.VarChar(250)
  total_amount      Float?    @map("total amount") @db.Real
  total_fees        Float?    @map("total fees") @db.Real
  order_date        String?   @map("order date") @db.VarChar(500)
  shipment_contents String?   @map("shipment contents") @db.VarChar(500)
  status_note       String?   @map("status note") @db.VarChar(500)
  serial            Int?
  cod               Float?
  collected         DateTime? @db.Date
  returned          DateTime? @db.Date
}

model vendors {
  id          Int      @id @default(autoincrement())
  vendor_name String?
  commission  Decimal? @db.Decimal
  status      String?
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model operation_cost {
  ops_cost Decimal? @db.Decimal

  @@ignore
}

model marketing_cost {
  id            Int       @id @default(autoincrement())
  campaign_id   BigInt?
  amount_spent  Decimal?  @db.Decimal(10, 2)
  campaign_date DateTime? @db.Date
  campaign_name String?   @db.VarChar(255)
  roas          Decimal?  @db.Decimal(10, 2)
  cpm           Decimal?  @db.Decimal(10, 2)
  cpp           Decimal?  @db.Decimal(10, 2)
}

model engagement_ad_data {
  id                              Int       @id @default(autoincrement())
  optimization_goal               String?   @db.VarChar(255)
  clicks                          Int?
  ad_id                           String?   @db.VarChar(255)
  ad_name                         String?   @db.VarChar(255)
  inline_post_engagement          Int?
  cost_per_inline_post_engagement Decimal?  @db.Decimal(10, 2)
  objective                       String?   @db.VarChar(255)
  reach                           Int?
  wish_bid                        Decimal?  @db.Decimal(10, 2)
  cpc                             Decimal?  @db.Decimal(10, 3)
  ctr                             Decimal?  @db.Decimal(10, 6)
  cpm                             Decimal?  @db.Decimal(10, 6)
  spend                           Decimal?  @db.Decimal(10, 2)
  date_start                      DateTime? @db.Timestamptz(6)
  date_stop                       DateTime? @db.Timestamptz(6)
}

model ad_insights_region {
  id            Int       @id @default(autoincrement())
  cpm           Decimal?  @db.Decimal(10, 2)
  reach         Int?
  impressions   Int?
  clicks        Int?
  region        String?   @db.VarChar(255)
  ad_id         String?   @db.VarChar(255)
  ad_name       String?   @db.VarChar(255)
  date_eg       DateTime? @db.Timestamp(6)
  date_est      DateTime? @db.Timestamp(6)
  campaign_name String?   @db.VarChar(255)
  inline_post_engagement  Int?
}

enum Role {
  ADMIN
  OWNER
  MEMBER
}
